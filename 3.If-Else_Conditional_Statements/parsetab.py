
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ASSIGN ELSE EQ GE GT ID IF LBRACE LE LPAREN LT NE NUMBER RBRACE RPAREN SEMICOLONstatements : statements statementstatements : statementstatement : ID ASSIGN NUMBER SEMICOLONstatement : IF LPAREN condition RPAREN LBRACE statements RBRACE ELSE LBRACE statements RBRACEstatement : IF LPAREN condition RPAREN LBRACE statements RBRACE\ncondition : NUMBER GT NUMBER\n          | NUMBER LT NUMBER\n          | NUMBER GE NUMBER\n          | NUMBER LE NUMBER\n          | NUMBER EQ NUMBER\n          | NUMBER NE NUMBER\n'
    
_lr_action_items = {'ID':([0,1,2,5,11,19,26,27,29,30,31,],[3,3,-2,-1,-3,3,3,-5,3,3,-4,]),'IF':([0,1,2,5,11,19,26,27,29,30,31,],[4,4,-2,-1,-3,4,4,-5,4,4,-4,]),'$end':([1,2,5,11,27,31,],[0,-2,-1,-3,-5,-4,]),'RBRACE':([2,5,11,26,27,30,31,],[-2,-1,-3,27,-5,31,-4,]),'ASSIGN':([3,],[6,]),'LPAREN':([4,],[7,]),'NUMBER':([6,7,13,14,15,16,17,18,],[8,10,20,21,22,23,24,25,]),'SEMICOLON':([8,],[11,]),'RPAREN':([9,20,21,22,23,24,25,],[12,-6,-7,-8,-9,-10,-11,]),'GT':([10,],[13,]),'LT':([10,],[14,]),'GE':([10,],[15,]),'LE':([10,],[16,]),'EQ':([10,],[17,]),'NE':([10,],[18,]),'LBRACE':([12,28,],[19,29,]),'ELSE':([27,],[28,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'statements':([0,19,29,],[1,26,30,]),'statement':([0,1,19,26,29,30,],[2,5,2,5,2,5,]),'condition':([7,],[9,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> statements","S'",1,None,None,None),
  ('statements -> statements statement','statements',2,'p_statements_multiple','parser.py',11),
  ('statements -> statement','statements',1,'p_statements_single','parser.py',15),
  ('statement -> ID ASSIGN NUMBER SEMICOLON','statement',4,'p_statement_assign','parser.py',20),
  ('statement -> IF LPAREN condition RPAREN LBRACE statements RBRACE ELSE LBRACE statements RBRACE','statement',11,'p_statement_if_else','parser.py',26),
  ('statement -> IF LPAREN condition RPAREN LBRACE statements RBRACE','statement',7,'p_statement_if','parser.py',33),
  ('condition -> NUMBER GT NUMBER','condition',3,'p_condition','parser.py',42),
  ('condition -> NUMBER LT NUMBER','condition',3,'p_condition','parser.py',43),
  ('condition -> NUMBER GE NUMBER','condition',3,'p_condition','parser.py',44),
  ('condition -> NUMBER LE NUMBER','condition',3,'p_condition','parser.py',45),
  ('condition -> NUMBER EQ NUMBER','condition',3,'p_condition','parser.py',46),
  ('condition -> NUMBER NE NUMBER','condition',3,'p_condition','parser.py',47),
]
